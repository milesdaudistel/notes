Latex sometimes doesn't work if there's a space after your $

https://www.tablesgenerator.com/markdown_tables#
Markdown table generator.  I usually check off compact mode.

http://jsmachines.sourceforge.net/machines/lr1.html
if Stoke works on a cpu, and you can easily transfer that to a gpu, then you can transfer it to any kind of asic.  Crypto mining, tpu acceleration, whatever.
look up 'automatic parallelization tool' on wikipedia.  Par4All does stuff with GPUs.  SUIF is 'free infrastructure designed to support collaborative research in optimizing and parallelizing compilers'.  Also somewhere on this page is another mention of the polyhedral model, which is what Polly uses.  I feel like its even more worth checking out now.
SequenceL sounds pretty much exactly like what you want in a language.  I was sure it existed already.  Wait it was made in 1989 and wasn't even applied to parallel computing until 1998.  Still, worth looking at it.  Also, I know it says its a proprietary language, but there's a 'free community edition' or something along those lines.
Implies (->) vs entails (turnstile).  https://math.stackexchange.com/questions/286077/implies-vs-entails-vs-provable
They say implies is for object language (think your favorite programming langugae, or math, or whatever), and entails is for the metalanguage (english, the language we use to talk about our favorite programming language).  A implies B doesn't _assert_ anything.  It's just a statement in the object language.  turnstile A implies B means "i can prove that A implies B."  This is equivalent to A turnstile B.  Our usual use of implication kind of implicitly assumes a turnstile in front of it.  It's like, if I say 3=4, you implicitly think 'this guy is talking about the mathematical language we use every day.  He is saying 'turnstile 3=4', which is totally wrong'.  But I could say 3=4, to which you would say 'you're dumb' to which I would say, 'I'm not talking about the normal every day math that we use, I'm talking about my own special language that I call 'math' that I made up that has nothing to do with the language of math that you know'.
You know how python has that new syntax for string concatenation?  x = 4, y="hello, my favorite number is {x}"?  It shouldn't be curly braces.  Json is straight up text, and it uses curly braces.  That would require a lot of escaping.  Instead, use something that isn't common, like # or $.  Let's try it.
y="hello, my favorite number is $x$".  
y="hello, my favorite number is #x#".
Read the Go Faq.  It answers so much about the design choices of Go.
Also, the Go source code seems pretty reasonable.  Check out the 'frontend', the recursive descent parser.
